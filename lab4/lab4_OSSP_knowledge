Пролог (Entry Section) – это часть процесса, который определяет вход в критическую секцию
конкретного процесса из многих других процессов.

Критическая секция (Critical Section) – это часть, в которой только одному процессу разрешено
выполняться и изменять общую переменную. Эта часть процесса гарантирует, что только никакой
другой процесс не сможет получить доступ к общему ресурсу (к общим данным, например).(вып-ся как атомарная операция)

Эпилог (Exit Section) – это часть процесса, которая позволяет другому процессу, ожидающему в
Прологе, войти в критическую секцию. Тут проверяется, что процесс, завершивший выполнение
своей критической секции, может быть через эпилог удален.

Регулярная часть кода (Remainder Section) – все остальные части кода, кроме вышеперечисленных, так иногда называются (оставшаяся часть).
Операция в общей области памяти называется атомарной, если она завершается в один шаг относительно других потоков, имеющих доступ к этой памяти.
Во время выполнения такой операции над переменной, ни один поток не может наблюдать изменение наполовину завершенным.
Атомарная загрузка гарантирует, что переменная будет загружена целиком в один момент времени. Неатомарные операции не дают такой гарантии.

Организации взаимодействия процессов
Bad
Запрет прерываний
Переменная-замок (lock)-не атомарная
Строгое чередование-процессы мешают друг другу
Флаги готовности-вызывает тупиковую ситуацию
Good
Алгоритм Петерсона-для двух процессов
Алгоритм регистратуры (Bakery algorithm)-для n процессов

Алгоритмы организации взаимодействия процессов
1) Задача должна быть решена чисто программным способом на обычной машине, не имеющей специальных команд взаимоисключения
(на самом деле сегодня такую машину найти трудно).
При этом предполагается, что основные инструкции языка программирования (такие примитивные инструкции как load, store, test) являются атомарными операциями.
2) Не должно существовать никаких предположений об относительных скоростях выполняю-
щихся процессов или количестве процессоров, на которых они исполняются.
3) Если процесс исполняется в своей критической секции, то не существует никаких других
процессов, которые исполняются в своих соответствующих критических секциях.
Это условие получило название условия взаимоисключения (mutual exclusion).
4) Процессы, которые находятся вне своих критических секций и не собираются входить в них,
не могут препятствовать другим процессам входить в их собственные критические секции.
Если нет процессов в критических секциях, и имеются процессы, желающие войти в них (в прологе), то только те процессы,
которые не исполняются в регулярной секции (regular section), должны принимать решение о том, какой процесс войдет в свою критическую секцию (только те, что в
прологе).
Такое решение не должно приниматься бесконечно долго.
Это условие получило название условия прогресса (progress).
5) Не должно возникать бесконечного ожидания для входа процесса в свою критическую секцию. От того момента,
когда процесс запросил разрешение на вход в критическую секцию, и до
того момента, когда он это разрешение получил, другие процессы могут пройти через свои критические секции лишь ограниченное число раз.
Это условие получило название условия ограниченного ожидания (bound waiting)

Механизмы синхронизации
семафор - это механизм синхронизации, который используется для управления доступом к общим ресурсам, таким как разделяемая память. Семафоры могут быть бинарными (имеют два состояния) или счетчиковыми (имеют значение, которое может быть произвольным целым числом).

В двоичном состоянии, семафор (Mutex) может быть заблокирован одним потоком, и только этот поток может его разблокировать. С использованием счетчика, семафор может быть заблокирован одним или более потоками. При каждом разблокировании значение счетчика увеличивается, что позволяет другим потокам блокировать семафор.

Семафоры используются для предотвращения гонок данных, проблем с памятью и других типичных проблем многопоточных приложений, где несколько потоков должны иметь доступ к одному ресурсу. Кроме того, семафоры используются для контроля ввода-вывода и для управления приоритетами выполнения потоков.

Семафор (semaphore) – примитив синхронизации работы процессов и потоков, в основе которого лежит счётчик, над которым можно производить две атомарные операции:
увеличение и уменьшение значения на единицу, при этом операция уменьшения для нулевого значения счётчика является блокирующей.
Служит для построения более сложных механизмов синхронизации и используется для синхронизации параллельно работающих задач,
для защиты передачи данных через разделяемую память, для защиты критических секций, а также для управления доступом к аппаратному обеспечению.

Мьютексные семафоры (мьютексы) являются упрощённой реализацией семафоров, аналогичной двоичным семафорам с тем отличием, 
что мьютексы должны отпускаться тем же потоком, который осуществляет их захват. Мьютексы наряду с двоичными семафорами используются в организации 
критических участков кода.
В отличие от двоичных семафоров, начальное состояние мьютекса не может быть захваченным.

Мьютекс (mutex, mutual exclusion — «взаимное исключение») — аналог одноместного семафора, служащий для синхронизации одновременно выполняющихся потоков.
Мьютекс отличается от семафора тем, что только владеющий им поток может его освободить.
Задача мьютекса — защита объекта от доступа к нему других потоков, отличных от того, который завладел мьютексом.
В каждый конкретный момент только один поток может владеть объектом, защищённым мьютексом. Если другому потоку будет нужен доступ к переменной, защищённой
мьютексом, то этот поток засыпает до тех пор, пока мьютекс не будет освобождён.

ПРИМЕР
Мьютекс
Ключ от туалета.
Один человек может иметь ключ занимать туалет одновременно. Когда заканчивает, он дает ‒ ‒
(освобождает) ключ следующему человеку в очереди.
Официально: «Мьютексы обычно используются для сериализации доступа к разделу реентерабельного кода,
который не может выполняться одновременно более чем одним потоком. Объект
мьютекса позволяет только одному потоку войти в контролируемую секцию, вынуждая другие потоки,
которые пытаются получить доступ к этот раздел, чтобы дождаться, пока первый поток не
выйдет из этой секции"»
Семафор
Это некоторое количество одинаковых бесплатных ключей от туалета.
Например, у нас есть четыре туалета с одинаковыми замками и ключами. Счетчик семафоров ‒
счетчик ключей вначале установлен на 4 (все четыре туалета свободны), затем значение счетчи ‒ -
ка уменьшается по мере того, как входят люди. Если все туалеты заполнены, т.е. свободных ключей
не осталось, счетчик семафоров равен 0. Теперь, когда один человек выходит из туалета, семафор
увеличивается до 1 (один свободный ключ) и передается следующему человеку в очереди.
Официально: «Семафор ограничивает количество одновременных пользователей общего ресурса до некоторого максимального числа.
Потоки могут запрашивать доступ к ресурсу (уменьшая
семафор) и могут сигнализировать, что они закончили использование ресурса (увеличивая семафор).»

Монитор — высокоуровневый механизм взаимодействия и синхронизации процессов, обеспечивающий доступ к общим ресурсам (аппаратура или набор переменных).
Компилятор или интерпретатор прозрачно для программиста вставляет код блокировки-разблокировки в оформленные соответствующим образом процедуры,
избавляя программиста от явного обращения к примитивам синхронизации.
Монитор — это специальный объектный тип данных, состоящий из:
- переменных, связанных с общим ресурсом;
- набора процедур, взаимодействующих с этим ресурсом (функции-методы);
- мьютекса;
- инварианта, определяющего условия, позволяющие избежать состояние гонки
Важной особенностью мониторов является то, что в любой момент времени только один процесс внутри данного монитора может быть активен,
т. е. находиться в состоянии «готовность» или
«исполнение». 

Сообщения
Для прямой и непрямой адресации достаточно двух примитивов, чтобы описать передачу сообщений по линии связи — send и receive.
В случае прямой адресации их обозначают обычно так:
send(P, message) — послать сообщение message процессу P;
receive(Q, message) — получить сообщение message от процесса Q.
В случае непрямой адресации их обозначают обычно так:
send(A, message) — послать сообщение message в почтовый ящик A;
receive(A, message) — получить сообщение message из почтового ящика A.
Примитивы send и receive уже имеют скрытый механизм взаимоисключения. Более того, в
большинстве систем они уже имеют и скрытый механизм блокировки при чтении из пустого буфера и при записи в полностью заполненный буфер.
Реализация решения задачи producer-consumer для таких примитивов становится неприлично
тривиальной. 
Функции ядра Linux:

semget() - создает новый массив семафоров или получает доступ к существующему массиву семафоров

semop() - производит операции над массивом семафоров

semctl() - выполняет различные операции управления массивом семафоров

Функции из POSIX API:

sem_open() - открывает именованный семафор или создает новый, если он не существует

sem_wait() - ожидает и захватывает семафор

sem_post() - освобождает семафор
