fork(2)— создает дочерний процесс
execve(2)— выполнить программу
exit()— функция, завершающая работу программы
wait(2)— ожидает завершения процесса
waitpid(2)— ожидает завершения процесса
waitid(2)— ожидает завершения процесса
environ(7)– пользовательское окружение

-----------------------------------------------------------------------------------------------
fork создает процесс-потомок, который отличается от родительского только значени-
ями PID (идентификатор процесса) и PPID (идентификатор родительского процесса), а
также тем фактом, что счетчики использования ресурсов установлены в 0.
Возвращаемое значение
При успешном завершении родителю возвращается PID процесса-потомка, а про-
цессу-потомку возвращается 0.
При неудаче родительскому процессу возвращается -1, процесс-потомок не создает-
ся, а значение errno устанавливается должным образом.

-----------------------------------------------------------------------------------------------
execve() выполняет программу, заданную параметром filename.
В последнем случае интерпретатор — это правильный путь к исполняемому файлу,
который не является скриптом — этот файл будет выполнен как интерпретатор [arg]
filename.
argv — это массив строк, аргументов новой программы.
envp — это массив строк в формате key=value, которые передаются новой программе
в качестве окружения (environment).
Как argv, так и envp завершаются нулевым указателем.
К массиву аргументов и к окружению можно обратиться из функции main(), которая
объявлена как
int main(int argc, char *argv[], char *envp[]);
//execve() - осуществляет вызов функции main, находящейся в другой программе, передавая ей свои аргументы в качестве входных. Заменяем образ текущего процесса другой программой.
//int execve(const char* path, char* const argv[], char* const envp[]) 
//Аргумент argc типа integer содержит в себе количество аргументов командной строки. 
	//const char* path - путь программы
	//argv[0] - имя программы; argv[1],[2] и т.д - аргументы передаваемые программой
	//Если execve() произошла ошибка - то return -1;
-----------------------------------------------------------------------------------------------
environ — среда пользователя
extern char **environ;
Переменная environ указывает на массив указателей на строки, называемый «окру-
жением». Последний указатель в этом массиве имеет значение NULL.
Этот массив строк предоставляется процессу вызовом execve(2) при запуске новой
программы.
Когда дочерний процесс создается с помощью fork(2), он наследует копию своего
родительского окружения.
По соглашению строки в окружении имеют форму "имя=значение".
Имя чувствительно к регистру и не может содержать символ "=".
Значение может быть любым, что может быть представлено в виде строки.
-----------------------------------------------------------------------------------------------
Переменные окружения, которые обычно встречаются в системе
Список неполный и включает только общие переменные, которые обычные пользо-
ватели видят в своей повседневной жизни.
Переменные среды, специфичные для конкретной программы или библиотечной
функции, задокументированы в разделе ENVIRONMENT соответствующей страницы руко-
водства.
USER — имя вошедшего в систему пользователя (используется некоторыми програм-
мами, производными от BSD).
LOGNAME — имя вошедшего в систему пользователя (используется некоторыми про-
граммами, производными от System-V). Устанавливается при входе в систему.
HOME — «домашний» каталог пользователя. Устанавливается при входе в систему.
LANG — имя, используемое для категорий локалей, если оно не переопределено пере-
менной LC_ALL или более конкретными переменными среды, такими как LC_COLLATE,
LC_CTYPE, LC_MESSAGES, LC_MONETARY, LC_NUMERIC и LC_TIME (информацию о переменных
среды LC_* можно найти locale(7)).
PATH — последовательность префиксов каталогов, которую sh(1) и многие другие
программы используют при поиске исполняемого файла, указанного как простое имя
файла (т. е. путь, не содержащий '/'). Префиксы разделяются двоеточиями ':'.
Аналогично тому, как используется PATH, некоторыми оболочками для поиска цели
команды изменения каталога (cd <target>) используется CDPATH.
Для поиска справочных страниц man(1) использует MANPATH, и так далее.
PWD — текущий рабочий каталог. Устанавливается некоторыми оболочками.
SHELL — абсолютный путь к оболочке, используемой пользователем при входе. Уста-
навливается при входе в систему.
TERM — тип терминала, для которого должен быть подготовлен вывод.
PAGER — предпочитаемая пользователем утилита для отображения текстовых файлов.
Это может быть любая строка, допустимая в качестве операнда командной строки для
команды sh -c. Если PAGER имеет значение null или не установлен, то приложения,
запускающие пейджер, по умолчанию будут использовать программу, такую как less(1)
или more(1).
-----------------------------------------------------------------------------------------------
wait, waitpid — ожидает завершения процесса
#include <sys/types.h>
#include <sys/wait.h>
pid_t wait(int *status);
pid_t waitpid(pid_t pid, int *status, int options);
Ожидает изменения состояния процесса-потомка и получения информацмм о потом-
ке, чье состояние изменилось (завершение, останов/продолжение работы по сигналу).
Функция wait приостанавливает выполнение текущего процесса до тех пор, пока ка-
кой нибудь из дочерних процессов не завершится, или до появления сигнала, который
либо завершает текущий процесс, либо требует вызвать функцию-обработчик.
Функция waitpid приостанавливает выполнение текущего процесса до тех пор, пока
дочерний процесс, указанный в параметре pid, не завершит выполнение, или пока не
появится сигнал, который либо завершает текущий процесс, либо требует вызвать функ-
цию-обработчик.
Если указанный дочерний процесс к моменту вызова функций уже завершился (так
называемый «зомби» — "zombie"), то функция немедленно возвращает управление.
Системные ресурсы, связанные с дочерним процессом, освобождаются.
Если status не NULL, в нем будет сохранена информация о состоянии (см. ниже).
wait(&status) эквивалентна waitpid(-1, &status, 0).
-----------------------------------------------------------------------------------------------
_exit — функция, завершающая работу программы
#include <unistd.h>
#include <stdlib.h>
void _Exit(int status);
_exit "немедленно" завершает работу программы.
При этом:
- все дескрипторы файлов, принадлежащие процессу, закрываются;
- все его дочерние процессы начинают управляться процессом 1 (init/systemd), а ро-
дительскому процессу посылается сигнал SIGCHLD;
- значение status возвращается родительскому процессу как статус завершаемого
процесса (он может быть получен с помощью одной из функций семейства wait).
Функция _Exit эквивалентна функции _exit.
Возвращаемые значения
Эти функции никогда не возвращают управление вызвавшей их программе.
Соответствие стандартам
SVr4, SVID, POSIX, X/OPEN, BSD 4.3. Функция _Exit() была представлена в C99.

Дескриптор файла - это целое число без знака, 
с помощью которого процесс обращается к открытому файлу.
------------------------------------------------------------------------------------
Функция setenv() (UNIX) добавляет переменную окружения со значением находящимся в первом параметре, если ее не существует. Если переменная уже существует,
 то ее значение изменяется на заданное во втором параметре, при условии что флаг overwrite (третий параметр) не равен нулю, а если равен нулю, 
 то значение переменной окружения не изменяется (т.е. такой вызов ни к чему не приведет).
setenv() возвращает 0 при успешном завершении и -1 в других случаях.


Функция setenv ( ) должна обновить или добавить переменную в окружение вызывающего процесса. Аргумент envname указывает на строку, содержащую имя переменной среды, которую необходимо добавить или изменить. Переменной среды должно быть присвоено значение, на которое указывает envval . Функция завершится ошибкой, если envname указывает на строку, содержащую символ '=' . Если переменная среды, названная envname , уже существует и значение перезаписи не равно нулю, функция должна вернуть успех, и среда должна быть обновлена. Если переменная среды с именем envname уже существует и значениеперезапись равна нулю, функция должна вернуть успех, а среда останется неизменной.

Функция setenv () должна обновить список указателей, на которые указывает environ .

Строки, описанные envname и envval , копируются этой функцией.

Функция setenv () не обязательно должна быть потокобезопасной.

Функция getenv () должна искать в среде вызывающего процесса (см. Переменные среды XBD) имя переменной среды,
если оно существует, и возвращать указатель на значение переменной среды. Если указанная переменная среды не может быть найдена,
 должен быть возвращен нулевой указатель.
 Приложение должно гарантировать, что оно не изменяет строку, на которую указывает функция getenv ().
 ------------------------------------------------------------------------------------