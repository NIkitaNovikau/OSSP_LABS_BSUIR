Задание
Разработать две программы ‒ parent и child.
Перед запуском программы parent в окружении создается переменная среды CHILD_PATH
с именем каталога, где находится программа child.
Родительский процесс (программа parent) после запуска получает переменные среды,
сортирует их в LC_COLLATE=C и выводит в stdout. После этого входит в цикл обработки нажа-
тий клавиатуры.
Символ «+», используя fork(2) и execve(2) порождает дочерний процесс и запускает в
нем очередной экземпляр программы child. Информацию о каталоге, где размещается child,
получает из окружения, используя функцию getenv(). Имя программы (argv[0]) устанавливает-
ся как child_XX, где XX ‒ порядковый номер от 00 до 99. Номер инкрементируется родителем.
Символ «*» порождает дочерний процесс аналогично предыдущему случаю, однако ин-
формацию о расположении программы child получает, сканируя массив параметров среды,
переданный в третьем параметре функции main().
Символ «&» порождает дочерний процесс аналогично предыдущему случаю, однако ин-
формацию о расположении программы child получает, сканируя массив параметров среды,
указанный во внешней переменной extern char **environ, установленной хост-средой при
запуске (см. IEEE Std 1003.1-2017).
При запуске дочернего процесса ему передается сокращенное окружение, включающее
набор переменных, указанных в файле, который передается родительскому процессу как па-
раметр командной строки. Минимальный набор переменных должен включать SHELL, HOME,
HOSTNAME, LOGNAME, LANG, TERM, USER, LC_COLLATE, PATH. Дочерний процесс открывает этот
файл, считывает имена переменных, получает из окружения их значение и выводит в stdout.
Дочерний процесс (программа child) выводит свое имя, pid, ppid, открывает файл с набо-
ром переменных, считывает их имена, получает из окружения, переданного ему при запуске,
их значение способом, указанным при обработке нажатий, выводит в stdout и завершается.
Символ «q» завершает выполнение родительского процесса.
Программы компилируются с ключами
-W -Wall -Wno-unused-parameter -Wno-unused-variable -std=c11 -pedantic
Для компиляции, сборки и очистки используется make.
